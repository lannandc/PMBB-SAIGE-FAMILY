
params {
    // default assumes use of the docker container
    my_python = "/usr/bin/python3"

    // gpu paramater either ON or OFF

    GPU = "ON"

    data_csv = ""
    cohort_sets = "" 

    // binary and quantitative phenotype lists
    bin_pheno_list_file = ""
    //bin_pheno_list_file = ""
    quant_pheno_list_file = ""
    pheno_descriptions_file = ""


    //setting file type for step 2 (PLINK/BGEN)
    ftype = "PLINK"

    // default paths assume use of the docker container
    step1_script = "/usr/local/bin/step1_fitNULLGLMM.R"      
    step2_script = "/usr/local/bin/step2_SPAtests.R"

    use_sparse_GRM = false
    // step1_plink_prefix = ""
    // step1_sparse_grm = ""
    // step1_sparse_grm_samples = ""
   

    // default paths are for PMBB Geno data (PLINK)
    step1_plink_prefix  = ""
    plink_prefix = ""

    // default paths are for PMBB Geno data (BGEN)
    bgen_prefix  = ""
    samplefile = ""
    step2_pgen_prefix = "" 

    // desired snps to extract for step 2 (tsv 4 columns, one snp per line: chr start stop rsid)
    snplist = ""
    step2_input_prefix = "" //arbitrary
 
    group_file_prefix = ""

    info = 0.4
    // categorical and continuous covariates
    cat_covars = ["SEX"]
    cont_covars = ["DATA_FREEZE_AGE", "Genotype_PC1","Genotype_PC2","Genotype_PC3",	"Genotype_PC4"]

    // Covariates
    sex_strat_cat_covars = []
    sex_strat_cont_covars = cont_covars

    // P-Value Threshold for Summarizing Results at the End
    p_cutoff_summarize = 0.001

    // ID column label
    id_col = "PMBB_ID"

    // Plink parameters for SAIGE Step 1 Input QC which needs a small set of high-quality variants
    // Current defaults are recommended by GBMI analysis plan
    maf = 0.01
    geno = 0.01
    hwe = 1E-6

    // SAIGE-GENE Step 2 Parameters
    // Current defaults are recommended by BRAVA analysis plan
    min_maf = 0
    min_mac = 0.5
    grouptest_maf = "0.01"
    grouptest_annotation = "pLoF,damaging_missense,other_missense,synonymous,pLoF;damaging_missense,pLoF;damaging_missense;other_missense;synonymous"
    use_firth = "TRUE"
    firth_cutoff = 0.1
    LOCO = "FALSE"

 // this is for getting gene-based coordinates for plotting
    // also wrapped in the docker container
    gene_location_file = "/app/NCBI.gene.loc"

// list of cohorts (usually ancestry-stratified)
   cohort_list = [
   "AMR_ALL", "AMR_M","AMR_F",
   "AFR_ALL", "AFR_F", "AFR_M",
   "EAS_ALL", "EAS_F", "EAS_M",
   "EUR_ALL", "EUR_F", "EUR_M",
   "SAS_ALL",SAS_M","SAS_F"]

    sex_strat_cohort_list = [
     "AMR_M","AMR_F",
     "AFR_F", "AFR_M",
     "EAS_F", "EAS_M",
     "EUR_F", "EUR_M",
     "SAS_M","SAS_F",
     ]


// list of smaller cohorts used for testing
   //cohort_list = [
   //     "AMR_ALL", "AMR_M", "AMR_F"
   //     "EAS_ALL", "EAS_F", "EAS_M",
   //     ]

    //sex_strat_cohort_list = [
    //    "AMR_F", "AMR_M",
    //    "EAS_F", "EAS_M"
    //    ]

    // lists of smaller cohorts used for testing
     //cohort_list = ["AMR_ALL", "AMR_M", "EAS_ALL", "EAS_F", "EAS_M"]
     //sex_strat_cohort_list = ["AMR_M", "EAS_F", "EAS_M"]

    // cohort_list = ["AFR_ALL", "EUR_ALL"]
    // sex_strat_cohort_list = []

    // list of chromosome 
    chromosome_list = ["7"]
    //chromosome_list = ["22"]
    // Dictionary (Map) with default SAIGE Region column names mapped to new ones
    region_col_names = [
        Region: 'gene',
        Group: 'annot',
        max_MAF: 'max_maf',
        Pvalue: 'p_value',
        Pvalue_Burden: 'p_value_burden',
        BETA_Burden: 'beta_burden',
        SE_Burden: 'se_burden',
        Pvalue_SKAT: 'p_value_skat',
        MAC: 'mac',
        MAC_case: 'mac_case',
        MAC_control: 'mac_control',
        Number_rare: 'rare_var_count',
        Number_ultra_rare: 'ultrarare_var_count'
    ]

    // Dictionary (Map) with default SAIGE SingleAssoc column names mapped to new ones
    singles_col_names = [
        CHR: 'chromosome',
        POS: 'base_pair_location',
        MarkerID: 'variant_id',
        Allele1: 'other_allele',
        Allele2: 'effect_allele',
        AC_Allele2: 'effect_allele_count',
        AF_Allele2: 'effect_allele_fre:ncy',
        MissingRate: 'missing_rate',
        BETA: 'beta',
        SE: 'standard_error',
        Tstat: 't_statistic',
        var: 'variance',
        'p.value': 'p_value',
        'p.value.NA': 'p_value_na',
        'Is.SPA': 'is_spa_test',
        AF_case: 'allele_freq_case',
        AF_ctrl: 'allele_freq_ctrl',
        N_case: 'n_case',
        N_ctrl: 'n_ctrl',
        N_case_hom: 'n_case_hom',
        N_case_het: 'n_case_het',
        N_ctrl_hom: 'n_ctrl_hom',
        N_ctrl_het: 'n_ctrl_het',
        N: 'n'
    ]

}
